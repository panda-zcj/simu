{
    "fileheader.customMade": {
        // Author字段是文件的创建者 可以在specialOptions中更改特殊属性
        // 公司项目和个人项目可以配置不同的用户名与邮箱 搜索: gitconfig includeIf  比如: https://ayase.moe/2021/03/09/customized-git-config/
        // 自动提取当前git config中的: 用户名、邮箱
        // "Author": "git config user.name && git config user.email", // 同时获取用户名与邮箱
        "Author": "git config user.name", // 仅获取用户名
        // "Author": "git config user.email", // 仅获取邮箱
        // "Author": "OBKoro1", // 写死的固定值 不从git config中获取
        "Date": "Do not edit", // 文件创建时间(不变)
        // LastEditors、LastEditTime、FilePath将会自动更新 如果觉得时间更新的太频繁可以使用throttleTime(默认为1分钟)配置更改更新时间。
        "LastEditors": "git config user.name", // 文件最后编辑者 与Author字段一致
        // 由于编辑文件就会变更最后编辑时间，多人协作中合并的时候会导致merge
        // 可以将时间颗粒度改为周、或者月，这样冲突就减少很多。搜索变更时间格式: dateFormat
        "LastEditTime": "Do not edit", // 文件最后编辑时间
        // 输出相对路径，类似: /文件夹名称/src/index.js
        "FilePath": "no item name", // 文件在项目中的相对路径 自动更新
        // 插件会自动将光标移动到Description选项中 方便输入 Description字段可以在specialOptions更改
        "Description": "", // 介绍文件的作用、文件的入参、出参。
        // custom_string_obkoro1~custom_string_obkoro100都可以输出自定义信息
        // 可以设置多条自定义信息 设置个性签名、留下QQ、微信联系方式、输入空行等
        // "custom_string_obkoro1": "",
        // 版权声明 保留文件所有权利 自动替换年份 获取git配置的用户名和邮箱
        // 版权声明获取git配置, 与Author字段一致: ${git_name} ${git_email} ${git_name_email}
        // "custom_string_obkoro1_copyright": "Copyright (c) ${now_year} by ${git_name}, All Rights Reserved. "
        "custom_string_obkoro1_copyright": "Copyright (c) ${now_year} by pikaqiu, All Rights Reserved. "
    },
    // 函数注释
    "fileheader.cursorMode": {
        "description": "", // 函数注释生成之后，光标移动到这里
        "param": "", // param 开启函数参数自动提取 需要将光标放在函数行或者函数上方的空白行
        "return": "",
    },
    // 插件配置项
    "fileheader.configObj": {
        "autoAdd": true, // 检测文件没有头部注释，自动添加文件头部注释
        "autoAddLine": 100, // 文件超过多少行数 不再自动添加头部注释
        "autoAlready": true, // 只添加插件支持的语言以及用户通过`language`选项自定义的注释
        "supportAutoLanguage": [], // 设置之后，在数组内的文件才支持自动添加
        // 自动添加头部注释黑名单
        "prohibitAutoAdd": [
            "json",
            "md"
        ],
        "prohibitItemAutoAdd": [
            "项目的全称禁止项目自动添加头部注释, 使用快捷键自行添加"
        ],
        "folderBlacklist": [
            "node_modules"
        ], // 文件夹或文件名禁止自动添加头部注释
        "wideSame": false, // 头部注释等宽设置
        "wideNum": 13, // 头部注释字段长度 默认为13
        "functionWideNum": 0, // 函数注释等宽设置 设为0 即为关闭
        // 头部注释第几行插入
        "headInsertLine": {
            "php": 2, // php文件 插入到第二行
        },
        "beforeAnnotation": {
            "py": "#!/usr/bin/env python\n# coding=utf-8\n", // py文件默认，可修改
            "sh": "#!/bin/sh\n", // py文件默认，可修改
            // "*": "\n" // 所有文件的头部注释都在前面增加一个换行(除了py)
        }, // 头部注释之前插入内容
        "afterAnnotation": {
            "py": "\n\n\nif __name__ == \"__main__\":\n    pass"
        }, // 头部注释之后插入内容
        "specialOptions": {}, // 特殊字段自定义 比如: Author、LastEditTime、LastEditors、FilePath、Description、Date等
        "switch": {
            "newlineAddAnnotation": true // 默认遇到换行符(\r\n \n \r)添加注释符号
        },
        "moveCursor": true, // 自动移动光标到Description所在行
        "dateFormat": "YYYY-MM-DD",
        "atSymbol": [
            "@",
            "@"
        ], // 更改所有文件的自定义注释中的@符号
        "atSymbolObj": {
            "js": [
                "",
                "@"
            ], // .js文件的头部注释@符号去掉,所有文件的函数注释默认为@
            "java": [
                "#",
                "@"
            ] // .java文件 头部注释@改为#, 函数注释还是@
        }, //  更改单独语言/文件的@
        "colon": [
            ": ",
            ": "
        ], // 更改所有文件的注释冒号
        "colonObj": {}, //  更改单独语言/文件的冒号
        "filePathColon": "路径分隔符替换", // 默认值： mac: / window是: \
        "showErrorMessage": false, // 是否显示插件错误通知 用于debugger
        "writeLog": false, // 错误日志生成
        "CheckFileChange": false, // 单个文件保存时进行diff检查
        "createHeader": false, // 新建文件自动添加头部注释
        "useWorker": false, // 是否使用工作区设置
        "designAddHead": false, // 添加注释图案时添加头部注释
        "headDesignName": "random", // 图案注释使用哪个图案 
        "headDesign": false, // 是否使用图案注释替换头部注释
        // 自定义配置是否在函数内生成注释 不同文件类型和语言类型
        "cursorModeInternalAll": {
            "ts": true, // ts文件后缀是函数内生成函数注释
            "js": false, // js文件后缀是在函数外生成函数注释
            "python": true, // python语言类型文件时在函数内生成函数注释
            "defaultSetting": false // 默认是在函数外生成注释
        }, // 默认为false 在函数外生成函数注释
        "openFunctionParamsCheck": true, // 开启关闭自动提取添加函数参数
        "functionParamsShape": [
            "{",
            "}"
        ], // 函数参数外形自定义 
        // "functionParamsShape": "no type" 函数参数不需要类型
        "functionBlankSpaceAll": {
            // "js": 2, // 单独设置文件：js文件后缀 缩进两格
        }, // 函数注释空格缩进 默认为空对象 默认值为0 不缩进
        "functionTypeSymbol": "", // 参数没有类型时的默认值
        "typeParamOrder": "type param", // 参数类型 和 参数的位置自定义
        "NoMatchParams": "no show return", // 没匹配到函数参数，是否显示@param与@return这两行 默认不显示param
        "functionParamAddStr": " ", // 在 type param 后面增加字符串 可能是冒号，方便输入参数描述
        // 自定义语言注释，自定义取消 head、end 部分
        // 不设置自定义配置language无效 默认都有head、end
        "customHasHeadEnd": {}, // "cancel head and function" | "cancel head" | "cancel function" 
        "throttleTime": 60000, // 对同一个文件 需要过1分钟再次修改文件并保存才会更新注释
        // 自定义语言注释符号，覆盖插件的注释格式
        "language": {
            // js后缀文件
            "js": {
                "head": "/$$",
                "middle": " $ @",
                "end": " $/",
                // 函数自定义注释符号：如果有此配置 会默认使用
                "functionSymbol": {
                    "head": "/******* ", // 统一增加几个*号
                    "middle": " * @",
                    "end": " */"
                },
                "functionParams": "typescript" // 函数注释使用ts语言的解析逻辑
            },
            // 一次匹配多种文件后缀文件 不用重复设置
            "h/hpp/cpp": {
                "head": "/*** ", // 统一增加几个*号
                "middle": " * @",
                "end": " */"
            },
            // 针对有特殊要求的文件如：test.blade.php
            "blade.php": {
                "head": "<!--",
                "middle": " * @",
                "end": "-->",
            }
        },
        // 默认注释  没有匹配到注释符号的时候使用。
        "annotationStr": {
            "head": "/*",
            "middle": " * @",
            "end": " */",
            "use": false
        },
    },
    "[python]": {
        "editor.defaultFormatter": "ms-python.autopep8"
    },
    "C_Cpp.errorSquiggles": "disabled",
    "terminal.integrated.env.windows": {
        "PATH": "D:${/}Program Files (x86)${/}MSYS2${/}mingw64${/}bin;D:${/}Program Files (x86)${/}MSYS2${/}usr${/}bin;${env:PATH}",
        "CHERE_INVOKING": "1"
    },
    "markdown-preview-enhanced.enableScriptExecution": true,
    // Doxygen documentation generator set
    "doxdocgen.c.triggerSequence": "/", // 触发自动注释的生成
    "doxdocgen.c.commentPrefix": " * ", // 注释行的前缀
    "doxdocgen.c.firstLine": "/**", // 注释行的首行
    "doxdocgen.c.lastLine": "*/", // 注释行的尾行
    // Smart text snippet for factory methods/functions.
    "doxdocgen.c.factoryMethodText": "Create a {name} object",
    // Smart text snippet for getters.
    "doxdocgen.c.getterText": "Get the {name} object",
    // Smart text snippet for setters.
    "doxdocgen.c.setterText": "Set the {name} object",
    // Smart text snippet for constructors.
    "doxdocgen.cpp.ctorText": "Construct a new {name} object",
    // Smart text snippet for destructors.
    "doxdocgen.cpp.dtorText": "Destroy the {name} object",
    // The template of the template parameter Doxygen line(s) that are generated. If empty it won't get generated at all.
    "doxdocgen.cpp.tparamTemplate": "@tparam {param} ",
    // 文件注释：版权信息模板
    "doxdocgen.file.copyrightTag": [
        "@copyright Copyright (c) {year}  深圳市奥瓦机器人有限公司"
    ],
    // 文件注释：自定义模块，这里我添加一个修改日志
    // "doxdocgen.file.customTag": [
    //     "@par 修改日志:",
    //     "<table>",
    //     "<tr><th>Date       <th>Version <th>Author  <th>Description",
    //     "<tr><td>{date} <td>1.0.1     <td>zhoulq     <td>内容",
    //     "</table>",
    // ],
    // 文件注释的组成及其排序
    "doxdocgen.file.fileOrder": [
        "file", // @file
        "brief", // @brief 简介
        "author", // 作者
        "version", // 版本
        "date", // 日期
        "empty", // 空行
        "copyright", // 版权
        "empty",
        "custom" // 自定义
    ],
    // 下面时设置上面标签tag的具体信息
    "doxdocgen.file.fileTemplate": "@file {name}",
    "doxdocgen.file.versionTag": "@version 1.0.1",
    "doxdocgen.generic.authorEmail": "liqun_zhou91@163.com",
    "doxdocgen.generic.authorName": "zhoulq",
    "doxdocgen.generic.authorTag": "@author {author} ({email})",
    // 日期格式与模板
    "doxdocgen.generic.dateFormat": "YYYY-MM-DD",
    "doxdocgen.generic.dateTemplate": "@date {date}",
    // 根据自动生成的注释模板（目前主要体现在函数注释上）
    "doxdocgen.generic.order": [
        "brief",
        "tparam",
        "param",
        "return",
        "author",
        "date"
    ],
    "doxdocgen.generic.paramTemplate": "@param{indent:8}{param}{indent:8}",
    "doxdocgen.generic.returnTemplate": "@return {type} ",
    "doxdocgen.generic.splitCasingSmartText": true,
    "doxdocgen.generic.includeTypeAtReturn": true, // return 中包含类型信息
    "doxdocgen.generic.boolReturnsTrueFalse": false, // bool 返回值拆分成 true 和 false 两种情况
    "doxdocgen.generic.linesToGet": 20, // 回车后最多向下多少行去找函数声明
    "doxdocgen.generic.useGitUserName": false, // {author} 是都根据 git config --get user.name 替换
    "doxdocgen.generic.useGitUserEmail": false,
    //declarations or definitions anymore.
}