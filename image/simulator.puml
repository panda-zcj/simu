```puml

@startuml element
abstract        abstract
abstract class  "abstract class"
annotation      annotation（标注）
circle          circle
()              circle_short_form
class           class
class           class_stereo <<stereotype>>
diamond         diamond
<>              diamond_short_form
entity          entity
enum            enum
exception       exception
interface       interface
metaclass       metaclass
protocol        protocol
stereotype      stereotype
struct          struct
@enduml


' 泛化关系 <|--（是一种继承关系，表示子类继承父类的所有特征和行为。带三角箭头的实线，箭头指向父类）
' 实现关系 <|..（是一种类与接口的关系，表示类是接口所有特征和行为的实现。带三角箭头的虚线，箭头指向接口）
' 组合关系  *--（是一种整体与部分的关系。但部分不能离开整体而单独存在，组合关系是关联关系的一种，是比聚合关系还要强的关系。【代码体现】成员变量【箭头指向】带实心菱形的实线，实心菱形指向整体）
' 聚合关系  o-- （是一种整体与部分的关系。且部分可以离开整体而单独存在。聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。【代码体现】成员变量【箭头指向】带空心菱形的实线，空心菱形指向整体。）
' 关联关系 --> （是一种拥有关系，它使得一个类知道另一个类的属性和方法。【代码体现】成员变量【箭头指向】带普通箭头的实线，指向被拥有者。双向的关联可以有两个箭头，或者没有箭头。单向的关联有一个箭头。）
' 依赖关系 ..> （是一种使用关系，即一个类的实现需要另一个类的协助。【箭头指向】带普通箭头的虚线，普通箭头指向被使用者。）
@startuml attribute

类01 "整体" *-- "部分" 类02 : 包含

类03 "整体" o-- "部分" 类04 : 聚合

类05 "拥有" -->  类06

class 汽车

发动机 - 汽车 : 驱动 >
汽车 *- 轮子 : 拥有 4 >
汽车 -- 人 : < 所属
@enduml


' -  private 私有
' #  protected 受保护
' ~  package private 包内可见
' +  public 公有
@startuml ClassDemo

class DEMO.A {

    - {static} int counter
    - int time
    + void {abstract} start(int timeoutms)
    # void {abstract} start(Duration timeout)
    # void end()
}

note left of A::counter
该成员已注释
end note

note right of A::"start(int timeoutms)"
这个start方法的参数是int类型
end note

note right of A::"start(Duration timeout)"
这个start方法的参数是Duration类型
end note
@enduml


@startuml Simulator

class Time {
    - std::chrono::high_resolution_clock::time_point timePoint
    - std::tm start_time

    + Time(long long)
    + Time(int)
    + Time(double)
    + Time &operator+(const long long)
    + Time &operator+(const int)
    + Time &operator+(const double)
    + Time &operator+=(const long long)
    + Time &operator+=(const int)
    + Time &operator+=(const double)
    + bool operator<(const Time &)
    + bool operator>(const Time &)
    + bool operator==(const Time &)
    + bool operator<=(const Time &)
    + bool operator>=(const Time &)

    + std::chrono::nanoseconds::rep getTimeStamp()
    + void setTime(double curTimeOffset)
    + std::string printCurTime()
}

class NodeCommunication {
    - TCPSocket nodeIPC
    - int sockfd
    - IPCState pollState
    - bool stopPollThread
    + bool init()
    + bool run(int timeoutMS = -1)
    + bool exit()
    + bool terminate()
    + bool pushSendPacket(std::string data)
    + bool getReceivePacket(std::string &data)
    + bool popReceivePacket()
    + std::vector<int> getIPCHandles()
    + IPCState getPollState() const
}

class NodeStatistic {
    ' 仿真结果分析和可视化
    + bool operator()(nlohmann::ordered_json&)
}

class NodeDataProcessing {
    ' 仿真数据处理和分发
    + bool operator()(nlohmann::ordered_json &node, nlohmann::ordered_json &simulatorJsonPacket)
}

class NodeProtocolStack {
    ' 节点内部处理的调用栈
    + bool operator()(nlohmann::ordered_json&)
}

class Node {
    - NodeStatistic &statistic
    - NodeCommunication &communication
    - NodeDataProcessing &dataProcessing
    - NodeProtocolStack &protocolStack
    - nlohmann::ordered_json node
    + bool setNodeState(unsigned short nodeID, NodeState state, std::string description, std::string type)
    + bool run(nlohmann::ordered_json&)
    + bool exit()
    + static std::string getHexStr(unsigned short num)
    + static bool preInitNodeState()
    + static nlohmann::ordered_json initNodeState(unsigned short nodeID, std::string description, std::string type)
    + static void exec()
}

class SimulatorCommunication {
    - TCPSocket simulatorIPC
    - std::map<int, size_t> ipc
    - IPCState pollState
    - bool stopPollThread
    + bool init()
    + bool run(int timeoutMS = -1)
    + bool exit()
    + bool terminate()
    + bool pushSendPacket(int nodeID, std::string data)
    + bool pushSendPacketByHandle(int handle, std::string data)
    + bool getReceivePacket(int nodeID, std::string &data)
    + bool popReceivePacket(int nodeID)
    + std::vector<int> getIPCHandles()
    + std::vector<int> getUIHandles()
    + bool bindNodeIDAndIPCHandle(int nodeID, size_t handle)
    + IPCState getPollState() const
}

class SimulatorStatistic {
    ' 仿真结果分析和可视化
    + bool operator()(nlohmann::ordered_json&)
}

class SimulatorDataProcessing {
    ' 仿真数据处理和分发
    + bool operator()(nlohmann::ordered_json&)
}

class GenerateSimulationScene {
    ' 生成仿真场景
    + bool operator()(nlohmann::ordered_json&)
}

class UI {
    ' 通过网页实现远程界面的控制
}

class Simulator {
    - Time &currentTime
    - double &simulationInterval
    - Time &simulationDuration
    - SimulatorStatistic &statistic
    - SimulatorDataProcessing &dataProcessing
    - SimulatorCommunication &communication
    - GenerateSimulationScene &generateSimulationScene
    - nlohmann::ordered_json simulator
    + bool init()
    + bool ConfigureSimulation()
    + bool run()
    + static int exec()
}

SimulatorCommunication <--> NodeCommunication
SimulatorCommunication <--> UI

Simulator o-- SimulatorStatistic
Simulator o-- SimulatorCommunication
Simulator o-- SimulatorDataProcessing
Simulator o-- GenerateSimulationScene
Simulator o-- Time

Node o-- NodeStatistic
Node o-- NodeProtocolStack
Node o-- NodeCommunication
Node o-- NodeDataProcessing
Node o-- Time

interface Log {
    + void nanoLogInit(std::string logFileName, std::string logDirectory, nanolog::LogLevel logLevel, uint32_t log_file_roll_size_mb)
}

note left of Log
loglevel <=> DEBUG < INFO < WARN < CRIT
end note

Log *-- Time
Log --o GenerateSimulationScene
Log --o Simulator
Log --o SimulatorCommunication
Log --o SimulatorDataProcessing
Log --o SimulatorStatistic
Log --o Node
Log --o NodeCommunication
Log --o NodeDataProcessing
Log --o NodeStatistic
Log --o NodeProtocolStack

@enduml
```